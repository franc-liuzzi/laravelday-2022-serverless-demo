service: laravelday-2022-sls-demo

provider:
    name: aws
    # The AWS region in which to deploy (us-east-1 is the default)
    region: us-east-1
    # The stage of the application, e.g. dev, production, stagingâ€¦ ('dev' is the default)
    stage: dev
    runtime: provided.al2
    lambdaHashingVersion: 20201221
    profile: laravelday
    iam:
        role:
            statements:
                - Effect: Allow
                  Resource: !GetAtt CacheTable.Arn
                  Action:
                    - dynamodb:*
    environment:
        APP_KEY: base64:hIloa+AjBd2v4w2CqjNP+DkdzW7rKTZFqJmvw2DnRiM=
        DB_CONNECTION: mysql
        DB_HOST: ${ssm:/laravelday/db/host}
        DB_USERNAME: ${ssm:/laravelday/db/user}
        DB_PASSWORD: ${ssm:/laravelday/db/password}
        DB_DATABASE: laravelday
        CACHE_DRIVER: dynamodb
        DYNAMODB_CACHE_TABLE: !Ref CacheTable
        QUEUE_CONNECTION: sqs
        SQS_QUEUE: ${construct:jobs.queueUrl}

package:
    # Directories to exclude from deployment
    patterns:
        - "!node_modules/**"
        - "!public/storage"
        - "!resources/assets/**"
        - "!storage/**"
        - "!tests/**"
        - "!.env"

functions:
    # This function runs the Laravel website/API
    web:
        handler: public/index.php
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-81-fpm}
        events:
            - httpApi: "*"
    # This function lets us run artisan commands in Lambda
    artisan:
        handler: artisan
        timeout: 120 # in seconds
        layers:
            - ${bref:layer.php-81} # PHP
            - ${bref:layer.console} # The "console" layer

constructs:
    
    jobs:
        type: queue
        worker:
            handler: worker.php
            layers:
                - ${bref:layer.php-81}

    website:
        type: server-side-website
        assets:
            # '/js/*': public/js
            # '/css/*': public/css
            "/favicon.ico": public/favicon.ico
            "/robots.txt": public/robots.txt
            # add here any file or directory that needs to be served from S3
        # Laravel uses some headers that are not in CloudFront's default whitelist.
        # To add any, we need to list all accepted headers to pass through.
        # https://github.com/getlift/lift/blob/master/docs/server-side-website.md#forwarded-headers
        forwardedHeaders:
            - Accept
            - Accept-Language
            - Content-Type
            - Origin
            - Referer
            - User-Agent
            - X-Forwarded-Host
            - X-Requested-With
            # Laravel Framework Headers
            - X-Csrf-Token
            # Other Headers (e.g. Livewire, Laravel Nova), uncomment based on your needs
            # - X-Livewire
            # - X-Inertia

resources:
    Resources:
        CacheTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    -   AttributeName: id
                        AttributeType: S
                BillingMode: PAY_PER_REQUEST
                TimeToLiveSpecification:
                    AttributeName: ttl
                    Enabled: true
                KeySchema:
                    -   AttributeName: id
                        KeyType: HASH

plugins:
    - ./vendor/bref/bref
    - serverless-lift
